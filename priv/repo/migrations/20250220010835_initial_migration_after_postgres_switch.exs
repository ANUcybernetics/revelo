defmodule Revelo.Repo.Migrations.InitialMigrationAfterPostgresSwitch do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:variables, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :is_voi?, :boolean, null: false, default: false
      add :hidden?, :boolean, null: false, default: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :session_id, :uuid, null: false
      add :creator_id, :uuid, null: false
    end

    create table(:variable_votes, primary_key: false) do
      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :variable_id,
          references(:variables,
            column: :id,
            name: "variable_votes_variable_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false

      add :voter_id, :uuid, null: false, primary_key: true
    end

    create table(:users, primary_key: false) do
      add :confirmed_at, :utc_datetime_usec
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:variable_votes) do
      modify :voter_id,
             references(:users,
               column: :id,
               name: "variable_votes_voter_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:variable_votes, [:variable_id, :voter_id],
             name: "variable_votes_unique_vote_index"
           )

    alter table(:users) do
      add :email, :citext
      add :admin, :boolean, default: false
      add :hashed_password, :text
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:tokens, primary_key: false) do
      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :jti, :text, null: false, primary_key: true
      add :subject, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :purpose, :text, null: false
      add :extra_data, :map

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:sessions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:variables) do
      modify :session_id,
             references(:sessions,
               column: :id,
               name: "variables_session_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :creator_id,
             references(:users,
               column: :id,
               name: "variables_creator_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:variables, [:name, :session_id], name: "variables_unique_name_index")

    alter table(:sessions) do
      add :name, :text, null: false
      add :description, :text
      add :report, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:session_participants, primary_key: false) do
      add :facilitator?, :boolean, default: false

      add :session_id,
          references(:sessions,
            column: :id,
            name: "session_participants_session_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false

      add :participant_id,
          references(:users,
            column: :id,
            name: "session_participants_participant_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false
    end

    create table(:relationships, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :description, :text
      add :type_override, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :session_id,
          references(:sessions,
            column: :id,
            name: "relationships_session_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :src_id,
          references(:variables,
            column: :id,
            name: "relationships_src_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :dst_id,
          references(:variables,
            column: :id,
            name: "relationships_dst_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:relationships, [:src_id, :dst_id],
             name: "relationships_unique_relationship_index"
           )

    create table(:relationship_votes, primary_key: false) do
      add :type, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :relationship_id,
          references(:relationships,
            column: :id,
            name: "relationship_votes_relationship_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false

      add :voter_id,
          references(:users,
            column: :id,
            name: "relationship_votes_voter_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false
    end

    create unique_index(:relationship_votes, [:relationship_id, :voter_id],
             name: "relationship_votes_unique_vote_index"
           )

    create table(:loops, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :title, :text
      add :story, :text
      add :display_order, :bigint

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:loop_relationships, primary_key: false) do
      add :loop_index, :bigint, null: false

      add :loop_id,
          references(:loops,
            column: :id,
            name: "loop_relationships_loop_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false

      add :relationship_id,
          references(:relationships,
            column: :id,
            name: "loop_relationships_relationship_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false
    end

    create table(:context_docs, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :text, :text, null: false
      add :include?, :boolean, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :session_id,
          references(:sessions,
            column: :id,
            name: "context_docs_session_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end
  end

  def down do
    drop constraint(:context_docs, "context_docs_session_id_fkey")

    drop table(:context_docs)

    drop constraint(:loop_relationships, "loop_relationships_loop_id_fkey")

    drop constraint(:loop_relationships, "loop_relationships_relationship_id_fkey")

    drop table(:loop_relationships)

    drop table(:loops)

    drop_if_exists unique_index(:relationship_votes, [:relationship_id, :voter_id],
                     name: "relationship_votes_unique_vote_index"
                   )

    drop constraint(:relationship_votes, "relationship_votes_relationship_id_fkey")

    drop constraint(:relationship_votes, "relationship_votes_voter_id_fkey")

    drop table(:relationship_votes)

    drop_if_exists unique_index(:relationships, [:src_id, :dst_id],
                     name: "relationships_unique_relationship_index"
                   )

    drop constraint(:relationships, "relationships_session_id_fkey")

    drop constraint(:relationships, "relationships_src_id_fkey")

    drop constraint(:relationships, "relationships_dst_id_fkey")

    drop table(:relationships)

    drop constraint(:session_participants, "session_participants_session_id_fkey")

    drop constraint(:session_participants, "session_participants_participant_id_fkey")

    drop table(:session_participants)

    alter table(:sessions) do
      remove :updated_at
      remove :inserted_at
      remove :report
      remove :description
      remove :name
    end

    drop_if_exists unique_index(:variables, [:name, :session_id],
                     name: "variables_unique_name_index"
                   )

    drop constraint(:variables, "variables_session_id_fkey")

    drop constraint(:variables, "variables_creator_id_fkey")

    alter table(:variables) do
      modify :creator_id, :uuid
      modify :session_id, :uuid
    end

    drop table(:sessions)

    drop table(:tokens)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    alter table(:users) do
      remove :hashed_password
      remove :admin
      remove :email
    end

    drop_if_exists unique_index(:variable_votes, [:variable_id, :voter_id],
                     name: "variable_votes_unique_vote_index"
                   )

    drop constraint(:variable_votes, "variable_votes_voter_id_fkey")

    alter table(:variable_votes) do
      modify :voter_id, :uuid
    end

    drop table(:users)

    drop constraint(:variable_votes, "variable_votes_variable_id_fkey")

    drop table(:variable_votes)

    drop table(:variables)
  end
end
